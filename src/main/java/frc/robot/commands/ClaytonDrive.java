
// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;

import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import swervelib.telemetry.SwerveDriveTelemetry;
import swervelib.telemetry.SwerveDriveTelemetry.TelemetryVerbosity;



import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;
import swervelib.parser.PIDFConfig;
import swervelib.parser.SwerveParser;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class ClaytonDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final DriveTrain m_driveTrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public ClaytonDrive(DriveTrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveTrain = subsystem;
        addRequirements(m_driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        
        // SmartDashboard.putNumber("I", SwerveParser.pidfPropertiesJson.angle.i);
        // SmartDashboard.putNumber("D", SwerveParser.pidfPropertiesJson.angle.d);
        // SwerveParser.pidfPropertiesJson.angle.p = SmartDashboard.getNumber("P", SwerveParser.pidfPropertiesJson.angle.p);
        // SwerveParser.pidfPropertiesJson.angle.i = SmartDashboard.getNumber("I", SwerveParser.pidfPropertiesJson.angle.i);
        // SwerveParser.pidfPropertiesJson.angle.d = SmartDashboard.getNumber("D", SwerveParser.pidfPropertiesJson.angle.d);
        // double velocity = RobotContainer.getInstance().getJoystick2().getRawAxis(0);
        // if(Math.abs(velocity)<.2){
        //     velocity = 0;
        // }
        // m_driveTrain.run(velocity);
        
        
        //config.p = RobotContainer.getInstance().getJoystick1().getRawAxis(3);
        double xVelocity = RobotContainer.getInstance().getJoystick1().getRawAxis(0);
        double yVelocity = RobotContainer.getInstance().getJoystick1().getRawAxis(1);
        double angVelocity = RobotContainer.getInstance().getJoystick1().getRawAxis(2);
        if(Math.abs(xVelocity)<.2){
            xVelocity = 0;
        }
        if(Math.abs(yVelocity)<.2){
            yVelocity = 0;
        }
        if(Math.abs(angVelocity)<.2){
            angVelocity = 0;
        }
        
        m_driveTrain.drive(new Translation2d(xVelocity * m_driveTrain.maximumSpeed, yVelocity * m_driveTrain.maximumSpeed), 
        angVelocity, true);
        SmartDashboard.putNumber("P", SwerveParser.pidfPropertiesJson.angle.p);
        SmartDashboard.putNumber("I", SwerveParser.pidfPropertiesJson.angle.i);
        SmartDashboard.putNumber("D", SwerveParser.pidfPropertiesJson.angle.d);
        //SmartDashboard.putNumber("Samp", m_driveTrain.getSamp());
        SwerveParser.pidfPropertiesJson.angle.p = SmartDashboard.getNumber("P", SwerveParser.pidfPropertiesJson.angle.p);
        double hi = new swervelib.parser.PIDFConfig().p;
        //double hi2 = config.p;
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
