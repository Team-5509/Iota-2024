// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;

import java.util.concurrent.TimeUnit;
import java.util.function.DoubleSupplier;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.LightSubsystem;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class LightCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final LightSubsystem m_lightSubsystem;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
private int lightMode = 0;
private boolean alternatingBoolean = true;
private boolean detectNotes = true;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public LightCommand(LightSubsystem subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_lightSubsystem = subsystem;
        addRequirements(m_lightSubsystem);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        lightMode = (int)SmartDashboard.getNumber("Light Mode", lightMode);
        detectNotes = SmartDashboard.getBoolean("Lights Follow Load Status", true);
        //SmartDashboard.putNumber("Light Mode", lightMode);
        SmartDashboard.putBoolean("Note Detected", m_lightSubsystem.isNoteInSlot());
        //SmartDashboard.putBoolean("Lights Follow Load Status", detectNotes);
        if (detectNotes) {
            if (m_lightSubsystem.isNoteInSlot()) {
                if (lightMode == 0) {m_lightSubsystem.runLights(0.61);} //Red
                else if (lightMode == 1) {m_lightSubsystem.runLights(0.87);} //Blue
                else {m_lightSubsystem.runLights(0.91);} //Error color is purple because I like purple. Suck it up.
            }
            else {m_lightSubsystem.runLights(0.99);}
        }
        else {
            if (lightMode == 0) {m_lightSubsystem.runLights(0.61);} //Red
            else if (lightMode == 1) {m_lightSubsystem.runLights(0.87);} //Blue
            else if (lightMode == 2) {
                if (alternatingBoolean) {m_lightSubsystem.runLights(0.85);}
                else {m_lightSubsystem.runLights(0.67);}
                alternatingBoolean = !alternatingBoolean;
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            } //Chemic Colors
            else {m_lightSubsystem.runLights(0.91);} //Error color is purple because I like purple. Suck it up.
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
