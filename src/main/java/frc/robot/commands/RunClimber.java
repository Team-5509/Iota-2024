// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.Command;
import java.util.function.DoubleSupplier;

import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Climber;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class RunClimber extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Climber m_climber;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double rightStart;
    private double leftStart;
    private final double leftMax = 1000;
    private final double rightMax = 1000;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public RunClimber(Climber subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_climber = subsystem;
        addRequirements(m_climber);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        rightStart = m_climber.getRightPos();
        leftStart = m_climber.getLeftPos();
    } 

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {


        double right = RobotContainer.getInstance().getAuxController().getRawAxis(6);
        double left = RobotContainer.getInstance().getAuxController().getRawAxis(5);

        //check if method should be called. 
        if (((m_climber.getRightPos() == rightStart) && (m_climber.getRightPos() < 0)) || ((m_climber.getRightPos() == rightMax) && (m_climber.getRightPos() > 0))){
            m_climber.stopRightClimber();
        }
        // check min and max dont hardcode max
        m_climber.runRightClimber();

        if (((m_climber.getLeftPos() == leftStart) && (m_climber.getLeftPos() < 0)) || ((m_climber.getLeftPos() == leftMax) && (m_climber.getLeftPos() > 0))){
            m_climber.stopLeftClimber();
        }

        m_climber.runRightClimber();
    }

    

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
