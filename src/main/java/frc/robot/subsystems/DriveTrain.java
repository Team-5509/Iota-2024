// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import java.io.File;
import java.io.IOException;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Filesystem;
import swervelib.parser.SwerveParser;
import swervelib.SwerveDrive;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.networktables.NetworkTableInstance;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import swervelib.math.SwerveMath;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    private final SwerveDrive swerveDrive;
    public double maximumSpeed = Units.feetToMeters(14.5);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public DriveTrain(File directory) {
        try {
            swerveDrive = new SwerveParser(directory).createSwerveDrive(maximumSpeed);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            {
                throw new RuntimeException(e);
            }
        }
        NetworkTableInstance.getDefault().getTable("limelight");
        swerveDrive.setHeadingCorrection(false);
        swerveDrive.getModules()[0].getAngleMotor().setCurrentLimit(20);
        swerveDrive.getModules()[1].getAngleMotor().setCurrentLimit(20);
        swerveDrive.getModules()[2].getAngleMotor().setCurrentLimit(20);
        swerveDrive.getModules()[3].getAngleMotor().setCurrentLimit(20);
        //AHRS navx = (AHRS)swerveDrive.swerveDriveConfiguration.imu.getIMU();

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void drive(Translation2d translation, double rotation, boolean fieldRelative) {
        swerveDrive.drive(translation, rotation, fieldRelative, false); // Open loop is disabled since it shouldn't be
                                                                        // used most of the time.
    }
    boolean hit = false;
    public void dispPID() {
        if(!hit){
        SmartDashboard.putNumber("p", swerveDrive.swerveController.thetaController.getP()); hit = true;}
    //SmartDashboard.putNumber()}
        // SmartDashboard.putNumber("p1", swerveDrive.getModules()[1].configuration.anglePIDF.p);
        // SmartDashboard.putNumber("p2", swerveDrive.getModules()[2].configuration.anglePIDF.p);
        // SmartDashboard.putNumber("p3", swerveDrive.getModules()[3].configuration.anglePIDF.p);
        swerveDrive.swerveController.thetaController.setP(SmartDashboard.getNumber("p", 0.01));
        // swerveDrive.swerveController.thetaController.getP();
        // swerveDrive.swerveController.thetaController.setP();
        swerveDrive.swerveController.thetaController.setTolerance(5,5);
        SmartDashboard.putNumber("yaw",swerveDrive.getGyroRotation3d().getAngle());
        swerveDrive.swerveController.thetaController.setSetpoint(SmartDashboard.getNumber("s", 0.01));

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
